#
#   Bash Prompt Customization
#   Author: Cory Breed (cbreed28@gmail.com)
#
#   Floats the <user at host> above the comand line

# Setup some variables for colors, so that the PS1 export is readable
if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# Setup some variables for colors, so that the PS1 export is readable
if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

function git_info {

local s='';

# Check if the current firectory is in a Git repo
if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    
    # Check to see if the current directory is in the .git folder
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
        
        # Ensure the indec is up to date
        git update-index --really-refresh -q &>/dev/null;

        # Check for uncommitted changes in the index
        if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+';
        fi;

        # Check for unstages changes
        if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!';
        fi;

        # Check for untracked files
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            s+='?';
        fi;

        # Check for stashed files
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$';
        fi;
    fi;

    [ -n "${s}" ] && s=" [${s}]";

    echo -n "${s}";
else
    return;
fi;
}

# The goal of this function is to write out cbreed@adminstrators-macbook-pro on
# the top line of the shell, and to keep it there during all commands
function prompt_command {

tput cuu1                   # Make sure we start at the top line of the window
tput sc                     # Save the cursor position
tput cup 0 0                # Start the writing at the origin
tput el                     # Clear the top line if all content
tput setaf 166 ; tput bold  # Yellow, Bold
echo -n "${USER} "          # Write out the USER name
tput setaf 7 ; tput bold    # White
echo -n "at "               # Write out 'at'
tput setaf 64 ; tput bold   # Cyan, Bold
echo -n "${HOSTNAME} "      # Write out the hostname

# Check if the current firectory is in a Git repo
if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    
    tput setaf 7 ; tput bold    # White
    echo -n "on "               # Write out 'on'
    tput setaf 61 ; tput bold   # Magenta, Bold

    # Get the short symbolic ref.
    # If HEAD isn't a symbolic ref, get the short SHA for the latest commit
    # otherwise, do nothing
    local branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                         git rev-parse --short HEAD 2> /dev/null || \
                         echo '(unknown)')";

    echo -n "${branch_name}"      # Write out the branch name
    tput setaf 33 ; tput bold
    echo "$(git_info)"
fi;

tput rc                     # Reset the cursor
}

PROMPT_COMMAND=prompt_command

# The actual prompt export is "[Documents]$"
PS1="\[\033]0;\W\007\]";                    # Placeholder
PS1+="\[${bold}\]\n";                       # Don't overlap floating title bar from above
PS1+="\[${yellow}\][\W]\\$\[${reset}\] ";   # i.e. [Documents]$
export PS1

